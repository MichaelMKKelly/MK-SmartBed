substitutions:
  name: esphome-web-f34bb0
  friendly_name: MK-SmartBed

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

dallas:
  - pin: GPIO25
  #- update_interval: 10s

number:
  - platform: template
    disabled_by_default: True
    name: Bed Trigger Level
    id: bed_trigger_level
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 3.5
    step: 0.05
    icon: mdi:arrow-collapse-down
    unit_of_measurement: V 

sensor:
  - platform: dallas
    name: "Temperature"
    address: "0xfc499bd446a23528"
  - platform: adc
    disabled_by_default: True
    pin: GPIO34
    attenuation: 12db
    name: "bed_sensor_1"
    id: "bed_sensor_1"
    icon: mdi:bed
    update_interval: 0.5s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
      - or:
          - throttle: 180s
          - delta: 0.02          
  - platform: adc
    disabled_by_default: True
    pin: GPIO35
    attenuation: 12db
    name: "bed_sensor_2"
    id: "bed_sensor_2"
    icon: mdi:bed
    update_interval: 0.5s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
      - or:
          - throttle: 180s
          - delta: 0.02
  - platform: adc
    disabled_by_default: True
    pin: GPIO32
    attenuation: 12db
    name: "bed_sensor_3"
    id: "bed_sensor_3"
    icon: mdi:bed
    update_interval: 0.5s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
      - or:
          - throttle: 180s
          - delta: 0.02          
  - platform: adc
    disabled_by_default: True
    pin: GPIO33
    attenuation: 12db
    name: "bed_sensor_4"
    id: "bed_sensor_4"
    icon: mdi:bed
    update_interval: 0.5s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
      - or:
          - throttle: 180s
          - delta: 0.02

binary_sensor:
  - platform: template
    name: "Bed Sensor 1 occupied"
    device_class: "occupancy"
    id: bed_1
    lambda: |-
      if (id(bed_sensor_1).state < id(bed_trigger_level).state) {      
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Bed Sensor 2 occupied"
    device_class: "occupancy"
    id: bed_2
    lambda: |-
      if (id(bed_sensor_2).state < id(bed_trigger_level).state) {      
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Bed Sensor 3 occupied"
    device_class: "occupancy"
    id: bed_3
    lambda: |-
      if (id(bed_sensor_3).state < id(bed_trigger_level).state) {      
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Bed Sensor 4 occupied"
    device_class: "occupancy"
    id: bed_4
    lambda: |-
      if (id(bed_sensor_4).state < id(bed_trigger_level).state) {      
        return true;
      } else {
        return false;
      }
  - platform: template
    disabled_by_default: True
    name: "Top of Bed Occupied"
    device_class: "occupancy"
    id: bed_1_and_2
    lambda: |-
      if (id(bed_sensor_1).state < id(bed_trigger_level).state) {      
        return true;
      } else {
        if (id(bed_sensor_2).state < id(bed_trigger_level).state) {      
          return true;
        } else {
          return false;
        }
        return false;
      }
  - platform: template
    disabled_by_default: True
    name: "Middle of Bed occupied"
    device_class: "occupancy"
    id: bed_3_and_4
    lambda: |-
      if (id(bed_sensor_3).state < id(bed_trigger_level).state) {      
        return true;
      } else {
        if (id(bed_sensor_4).state < id(bed_trigger_level).state) {      
          return true;
        } else {
          return false;
        }
        return false;
      }
  - platform: template
    name: "Bed Occupied"
    device_class: "occupancy"
    filters:
      - delayed_on: 5s
      - delayed_off: 30s
    id: bed_any
    lambda: |-
      if (id(bed_sensor_1).state < id(bed_trigger_level).state) {      
        return true;
      } else {
        if (id(bed_sensor_2).state < id(bed_trigger_level).state) {      
          return true;
        } else {
          if (id(bed_sensor_3).state < id(bed_trigger_level).state) {      
            return true;
          } else {
            if (id(bed_sensor_4).state < id(bed_trigger_level).state) {      
              return true;
            } else {
              return false;
            }
            return false;
          }
          return false;
        }
        return false;
      }
